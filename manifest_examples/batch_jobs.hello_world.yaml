apiVersion: v1alpha
kind: BatchJob
metadata:
  name: hello-humble-jobs
  rosVersion: humble
  appVersion: dev-1
  edgeResourceGroup: ['public'] # default


jobSpec:
  - name: batch-evaluation-nav2
    maxParallelism: 10
    maxRetry: 3
    timeout: 5m
    lifeCycleTopic: /lifecycle_state
    variables:
      # KubeROS generates job set with all possible combinations of following parameters
      - toRosParamMap: helloworld-launch-parameters
        keyName: init_topic
        valueList: ['kube1', 'kube2', 'kube3', 'kube4']
      - toRosParamMap: helloworld-launch-parameters
        keyName: use_sim
        valueList: [true, false]
    repeatRosModule:
      - rosModuleName: task_controller
        repeatNum: 100

rosModules:
  - name: hello-world-talker
    image: metagoto/ros2-basic-examples:v2-param
    containerRegistryName: default # Optional, if not specified, use the default registry
    
    entrypoint: ["ros2 launch examples_rclpy_minimal_publisher publisher.launch.py"]
    sourceWs: /workspace/install   # Optional, you can also do it in Dockerfile

    preference: [onboard] # Preference for scheduler
    
    launchParameters: # Placeholder -> Not used in this example
      # args used in the launch file
      robot_ip: {SIM_ARM.ROBOT_IP} # hardware specific parameters -> Uppercase
      init_topic: {launch_parameters.init_topic}

    requirements: 
      latency: 50ms
      dynamicRescheduling: false
      privilege: true
      peripheral: ['sim-arm'] 
      nvidia: false # placeholder for the future
      containerRuntime: containerd/docker # placeholder for the future

    # To make this module reusable, you shouldn't change the rosmodule description
    # To use custom configuration, you can define your parameters in rosParameters/staticFiles section. 
    # In KubeROS Abstraction: code / configuration / file are separated!
    # DON'T MODIFY THE ROSMODULE, MODIFY THE ROSPARAMMAP!
    rosParameters: 
      # launch args
      - name: launch_parameters
        type: key-value
        valueFrom: helloworld-launch-parameters

      # yaml file to parameter server
      - name: minimal_publisher_params
        type: yaml
        valueFrom: publisher-param.yaml
        mountPath: /workspace/config/minimal_publisher


    staticFiles: 
      - name: ml_weights_container
        requiredBindType: container 
        hostpath: /workspace/configs/ml_model_weights
        valueFrom: ml-weights-container

  - name: hello-world-listener
    image: metagoto/ros2-basic-examples:v2-param

    entrypoint: ["ros2 run examples_rclpy_minimal_subscriber subscriber_lambda"]
    sourceWs: /workspace/install

    preference: [edge, onboard] # Preference for scheduler
    requirements: 
      latency: 50ms
      dynamicRescheduling: false
      privilege: true
      nvidia: false # placeholder for the future
      containerRuntime: containerd/docker # placeholder for the future
      useBridge: false # after parser, the target cluster should be injected.

  - name: task_controller
    image: metagoto/ros2-basic-examples:v2-param

    entrypoint: ["ros2 run examples_rclpy_minimal_subscriber subscriber_lambda"]
    sourceWs: /workspace/install

    lifecycleTopic: /lifecycle_state  # string: running, success, failed 


rosParamMap:
  # custom parameters
  - name: helloworld-launch-parameters
    type: key-value
    data:
      use_sim: false
      use_rviz: false
      init_topic: 'KuberROS'
      STARTX11: true

  - name: publisher-param.yaml
    type: yaml
    path: /Users/yongzhouzhang/coding_ws/kuberos/kuberos-cli/manifest_examples/deploy_hello_world/configs/publisher_param.yml
  

staticFileMap: 
  # Placeholder, not included in this test version
  - name: ml-weights-container
    # The file will be uploaded to the target cluster node
    bindType: container | upload | pv
    path: config_files/ml_model_weights.dummy
    hostpath: /workspace/config/weights
  - name: ml-weights-container 
    # Weights is package into a container and deployed along the rosmodule in the same pod. 
    bindType: container
    container: 
      - image: <container image address> 
        pullSecret: <name of your credential in KubeROS database> 
  - name: claimed_pv
    # decoupled storage, for using in the edge and cloud. 
    # feature with low priority. 


# Provide the registry credential to pull the image
containerRegistry:
  - name: default
    imagePullSecretName: 'kuberos-fogrobo-registry-token-test'
    imagePullPolicy: 'Always'

